@using RealtimeTestApp.Models
@model RealtimeTestApp.Models.Auction
@{
    ViewBag.Title = "Auction";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <h2>Auction Details</h2>
    <div class="col-md-6">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <a class="text-left">@Html.DisplayFor(m => m.ProductName)</a>    
            </div>
            <div class="panel-body">
                <div class="col-md-6">
                    <img src=@Model.Image class="img-rounded auction-img"/>
                    <br/>
                    <br/>
                    Remaining Time:
                    <p id="time">@Html.DisplayFor(m => m.Time)</p>
                    Starting Price:
                    <p id="startingPrice">@Html.DisplayFor(m => m.StartingPrice)</p>
                    Status:
                    <p id="state">@Html.DisplayFor(m => m.State)</p>
                    @if (User.Identity.IsAuthenticated && User.IsInRole("Admin") && Model.State == AuctionState.Ready)
                    {
                        @Html.ActionLink("Delete", "Delete", "Auction", new {id = Model.Id}, new {@class = "btn btn-primary button-padded"})
                        @Html.ActionLink("Edit", "EditForm", "Auction", new {id = Model.Id}, new {@class = "btn btn-primary button-padded" })
                        @Html.ActionLink("Open", "Open", "Auction", new {id = Model.Id}, new {@class = "btn btn-primary button-padded" })
                    }
                </div>
                <div class="col-md-6">
                    <h4 class="text-center"> Latest Bids </h4>
                    <div id="bids" class="text-center">

                    </div>
                </div>

            </div>
        </div>
    </div>

    <div id="auctionId" hidden>@Model.Id</div>
</div>

@section Scripts {
    @Scripts.Render("~/Scripts/jquery-3.1.1.min.js")
    @Scripts.Render("~/Scripts/jquery.signalR-2.2.1.min.js")
    @Scripts.Render("~/signalr/hubs")
    <script>
        var loadedBids = [];


        // A simple templating method for replacing placeholders enclosed in curly braces.
        if (!String.prototype.supplant) {
            String.prototype.supplant = function(o) {
                return this.replace(/{([^{}]*)}/g,
                    function(a, b) {
                        var r = o[b];
                        return typeof r === 'string' || typeof r === 'number' ? r : a;
                    }
                );
            };
        }


        var ticker, rowTemplate, $bidsBody = $("#bids"), bidsPerAuction = 10;

        $(function() {

            ticker = $.connection.auctionTicker;
            rowTemplate = '<p> {UserName} </p>';

            function init() {
                var id = $("#auctionId").text();
                ticker.server.getAllBids(id)
                    .done(function(bids) {
                        console.log(bids);
                        $bidsBody.empty();
                        $.each(bids,
                            function() {
                                var dom = $($.parseHTML(rowTemplate.supplant(this)));
                                loadedBids.push({
                                    'bid': this,
                                    'dom': dom
                                });
                                $bidsBody.append(dom);
                            });
                    });

            }


            ticker.client.tick = function() {
                var time = parseInt($("#time").text());

                if ($("#state").text() === "Open") {
                    $("#time").text(time - 1);
                }

            };

            ticker.client.updateAuction = function (updatedAuction) {
                console.log(updatedAuction);
                console.log(parseInt($("#auctionId").text()));
                if (updatedAuction.Id === parseInt($("#auctionId").text())) {

                    var currentStartingPrice = parseInt($("#startingPrice").text());
                    if (currentStartingPrice < updatedAuction.StartingPrice) {
                        var dom = $($.parseHTML(rowTemplate.supplant(updatedAuction.LastBidUser)));
                        loadedBids.push({
                            'bid': null,
                            'dom': dom
                        });

                        if (loadedBids.length > bidsPerAuction) {
                            loadedBids.shift().dom.remove();
                        }
                        $bidsBody.append(dom);
                    }


                    $("#time").text(updatedAuction.Time);
                    $("#productName").text(updatedAuction.ProductName);

                    var state = $("#state");
                    switch (updatedAuction.State) {
                        case 0:
                            state.text("Draft");
                            break;
                        case 1:
                            state.text("Ready");
                            break;
                        case 2:
                            state.text("Open");
                            break;
                        case 3:
                            state.text("Sold");
                            break;
                        case 4:
                            state.text("Expired");
                            break;
                    }

                    $("#startingPrice").text(updatedAuction.StartingPrice);
                }
            }

            // Start the connection
            $.connection.hub.start().done(init);
        });

    </script>
}