@using RealtimeTestApp.Models
@model RealtimeTestApp.Models.Auction
@{
    ViewBag.Title = "Auction";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Auction</h2>
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    Product Name: <p id="productName">@Html.DisplayFor(m => m.ProductName)</p>
                    Remaining Time: <p id="time">@Html.DisplayFor(m => m.Time)</p>
                    Starting Price: <p id="startingPrice">@Html.DisplayFor(m => m.StartingPrice)</p>
                    Status: <p id="status">@Html.DisplayFor(m => m.State)</p>
                    @if (User.Identity.IsAuthenticated && User.IsInRole("Admin") && Model.State == AuctionState.Ready )
                    {
                        @Html.ActionLink("Delete", "Delete", "Auction", new { id = Model.Id}, new {@class="btn btn-primary"})
                        @Html.ActionLink("Edit", "EditForm", "Auction", new { id = Model.Id }, new { @class = "btn btn-primary" })
                        @Html.ActionLink("Open", "Open", "Auction", new { id = Model.Id }, new { @class = "btn btn-primary" })
                    }
                    
                </div>
            </div>
        </div>
        <div class="col-md-6" id="bids">
        </div>
        <div id="auctionId" hidden>@Model.Id</div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/Scripts/jquery-3.1.1.min.js")
    @Scripts.Render("~/Scripts/jquery.signalR-2.2.1.min.js")
    @Scripts.Render("~/signalr/hubs")
    <script>
        var loadedBids = [];


        // A simple templating method for replacing placeholders enclosed in curly braces.
        if (!String.prototype.supplant) {
            String.prototype.supplant = function(o) {
                return this.replace(/{([^{}]*)}/g,
                    function(a, b) {
                        var r = o[b];
                        return typeof r === 'string' || typeof r === 'number' ? r : a;
                    }
                );
            };
        }


        var ticker, rowTemplate, $bidsBody = $("#bids");

        $(function() {

            ticker = $.connection.auctionTicker;
            rowTemplate = '<p> {UserName} </p>';

            function init() {
                console.log("Init Called");
                var id = $("#auctionId").text();
                ticker.server.getAllBids(id).done(function (bids) {
                    console.log(bids);
                    $bidsBody.empty();
                    $.each(bids,
                        function () {
                            var dom = $($.parseHTML(rowTemplate.supplant(this)));
                            loadedBids.push({
                                'bid': this,
                                'dom': dom
                            });
                            $bidsBody.append(dom);
                        });
                });

            }


            ticker.client.tick = function () {
                var time = parseInt($("#time").text());
                if (time <= 0 && $("#status").text() === "Open") {
                    if (loadedBids.length > 0) {
                        $("#status").text("Sold");
                    } else {
                        $("#status").text("Expired");
                    }
                    return;
                }
                if ($("#status").text() === "Open") {
                    $("#time").text(time - 1);
                }
                
            };

            ticker.client.extendAuction = function (auction, extendPeriod) {
                if(auction.Id === parseInt($("#auctionId").text())) {
                    var dom = $($.parseHTML(rowTemplate.supplant(auction.LastBidUser)));
                    loadedBids.push({
                        'bid': null,
                        'dom': dom
                    });

                    if (loadedBids.length > 10) {
                        loadedBids.shift().dom.remove();
                    }
                    $("#time").text(parseInt($("#time").text()) + extendPeriod);
                    $bidsBody.append(dom);
                }
            }


            // Start the connection
            $.connection.hub.start().done(init);
        });

    </script>
}